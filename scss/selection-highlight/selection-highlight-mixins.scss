///
/// Private, internal mixin used in selection-highlight
///
/// @group ::selection
/// @author absolutholz
///
/// @access private
///
@mixin _selection-highlight($background-color: false, $typography-color: false, $text-shadow: none) {
	@if ($background-color) {
		background-color: $background-color;
	}
	@if ($typography-color) {
		color: $typography-color;
	}
	@if ($text-shadow) {
		text-shadow: none;
	}
	@content;
}

///
/// Mixin for generating the CSS selector to style browser's `::selection`
///
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/::selection MDN web docs: ::selection
///
/// @group ::selection
/// @author absolutholz
///
/// @param {String} $background-color [false] - Optional
/// @param {String} $typograhy-color [false] - Optional
/// @param {String} $text-shadow [none] - [Normalize 7.0.0: Remove text-shadow in selection highlight](https://twitter.com/miketaylr/status/12228805301)
///
/// @output The `::selector` without browser-prefixing. If browser-prefixes are needed, they should be generated by autoprefixer.
///
/// @example scss - SCSS usage
///  @include selection-highlight(coral);
///
///  p:nth-child(even) {
///  	@include selection-highlight(olive) {
///  		color: white;
///  	}
///  }
///
/// @example css - CSS output
///  ::selection {
///  	background-color: coral;
///  	text-shadow: none;
///  }
///
///  p:nth-child(even)::selection {
///  	background-color: olive;
///  	text-shadow: none;
///  	color: white;
///  }
///
@mixin selection-highlight($args...) {
	@if (&) {
		&::selection {
			@include _selection-highlight($args...) {
				@content;
			}
		}
	} @else {
		::selection {
			@include _selection-highlight($args...) {
				@content;
			}
		}
	}
}
