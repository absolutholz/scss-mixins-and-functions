///
/// Create a box element with a fixed aspect ratio via the css padding-hack.
///
/// @link https://engageinteractive.co.uk/blog/top-10-scss-mixins 10 Sass (SCSS) mixins you should be using in your projects: No. 3
///
/// @group Aspect Ratios
/// @author absolutholz
///
/// @param {List|Map} $list [false] - A list or map with x and y coordinates of the desired ratio
/// @param {Number} $x [false] - The x (horizontal) value of the desired ratio
/// @param {Number} $y [false] - The y (vertical) value of the desired ratio
/// @param {Bool} $pseudo [false] - Should the box be generated via a pseudo element.  Set this to true when flex-basis alone defines the parent width.
/// @param {String} $unit ["%"] - The default CSS unit to be used. Most likely, if not the default `%` then maybe `vw`.
///
/// @output Padding-top value to create the desired aspect ratio, either nested directly under the parent selector or, optionally, as a before pseudo element.
///
@mixin aspect-ratio-box($list: false, $x: false, $y: false, $pseudo: false, $unit: "%") {
	@if ($list) {
		$padding: unquote(( nth($list, 2) / nth($list, 1) ) * 100 + $unit);
	} @else {
		$padding: unquote(( $y / $x ) * 100 + $unit);
	}

	@if $pseudo {
		// use before so that z-indexing is not required for simple layering
		&::before {
			content: "";
			display: block;
			padding-top: $padding;
			width: 100%;
		}
	} @else {
		padding-top: $padding;
	}

	position: relative;

	@content;
}
