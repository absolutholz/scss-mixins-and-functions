@import "aspect-ratio-functions";

///
/// Create a box element with a fixed aspect ratio via the css padding-hack.
///
/// @link https://engageinteractive.co.uk/blog/top-10-scss-mixins 10 Sass (SCSS) mixins you should be using in your projects: No. 3
///
/// @group Aspect Ratios
/// @author absolutholz
///
/// @param {Bool} $pseudo [false] - Should the box be generated via a pseudo element.  Set this to true when flex-basis alone defines the parent width.
/// @param {List|Map|String} $ratio [false] - The complete ratio. Use either this argument OR the next two.
/// @param {Number} $x [1] - The x (horizontal) value of the desired ratio
/// @param {Number} $y [1] - The y (vertical) value of the desired ratio
/// @param {String} $unit ["%"] - The default CSS unit to be used. Most likely, if not the default `%` then maybe `vw`.
/// @param {Number} $decimal-accuracy [2] - The number of decimal places to which the result should be rounded.
///
/// @output Padding-top value to create the desired aspect ratio, either nested directly under the parent selector or, optionally, as a before pseudo element.
///
/// @example scss - SCSS usage - Create a pseudo element with the passed keyword aspect ratio from `$aspect-ratios` Map
///		.selector {
///			@include aspect-ratio-box(true, "4x3");
///		}
/// @example css - CSS output
///		.selector::before {
///			content: "";
///			display: block;
///			padding-top: 75%;
///			position: relative;
///			width: 100%;
///		}
///
/// @example scss - SCSS usage - Custom ratio passed as individual `x` and `y` and without creating a pseudo element.
///		.selector {
///			@include aspect-ratio-box($x: 42, $y: 24, $unit: vw);
///		}
/// @example css - CSS output
///		.selector {
///			padding-top: 57.14vw;
///			position: relative;
///		}
///
@mixin aspect-ratio-box($pseudo: false, $args...) {
	$padding: calculate-aspect-ratio($args...);

	@if $pseudo {
		// use before so that z-indexing is not required for simple layering
		&::before {
			content: "";
			display: block;
			padding-top: $padding;
			width: 100%;
		}
	} @else {
		padding-top: $padding;
	}

	position: relative;

	@content;
}
